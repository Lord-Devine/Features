import asyncio

from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from config import AUTO_GCAST, AUTO_GCAST_MSG, LOG
from SungJinwoo import app
from SungJinwoo.utils.database import get_served_chats

# Convert AUTO_GCAST to boolean based on "On" or "Off"
AUTO_GCASTS = AUTO_GCAST.strip().lower() == "on"

START_IMG_URLS = "https://files.catbox.moe/6iv99c.jpg"

MESSAGE = f"""**Advanced music player bot for Telegram groups + channels VC. üéß

‚û• Commands: /play, /vplay, /cplay
‚û• Supported: Welcome, Left notice, Tagall, VCTag, Ban-Mute, Shayari, Lyrics, Song-Video download, etc. ‚ù§Ô∏è
üîê·¥úÍú±·¥á ¬ª [/start](https://t.me/{app.username}?start=help) ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥è·¥õ

‚û≤  ô·¥è·¥õ :** @{app.username}"""

BUTTON = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton(
                "+ Add me to your clan darlo +",
                url=f"https://t.me/musicXanime_bot?startgroup=s&admin=delete_messages+manage_video_chats+pin_messages+invite_users",
            )
        ]
    ]
)

caption = f"""{AUTO_GCAST_MSG}""" if AUTO_GCAST_MSG else MESSAGE

TEXT = """**·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö s·¥è ·¥Ä·¥ú·¥õ·¥è …¢·¥Ñ·¥Äs·¥õ/ ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™s ·¥Ö·¥è…™…¥…¢ …™…¥ ·¥Ä ü ü ·¥Ñ ú·¥Ä·¥õs ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥è·¥ús ü è.**\n**…™·¥õ ·¥Ñ·¥Ä…¥  ô·¥á s·¥õ·¥è·¥ò·¥ò·¥á·¥Ö  ô è ·¥ò·¥ú·¥õ ·¥†·¥Ä Ä…™·¥Ä ô ü·¥á [·¥Ä·¥ú·¥õ·¥è_…¢·¥Ñ·¥Äs·¥õ = (Off)]**"""


async def send_text_once():
    try:
        await app.send_message(LOG, TEXT)
    except Exception as e:
        pass


async def send_message_to_chats():
    try:
        chats = await get_served_chats()

        for chat_info in chats:
            chat_id = chat_info.get("chat_id")
            if isinstance(chat_id, int):  # Check if chat_id is an integer
                try:
                    await app.send_photo(
                        chat_id,
                        photo=START_IMG_URLS,
                        caption=caption,
                        reply_markup=BUTTON,
                    )
                    await asyncio.sleep(
                        20
                    )  # Sleep for 20 seconds between sending messages
                except Exception as e:
                    pass  # Do nothing if an error occurs while sending message
    except Exception as e:
        pass  # Do nothing if an error occurs while fetching served chats


async def continuous_broadcast():
    await send_text_once()  # Send TEXT once when bot starts

    while True:
        if AUTO_GCASTS:
            try:
                await send_message_to_chats()
            except Exception as e:
                pass

        # Wait for 100000 seconds before next broadcast
        await asyncio.sleep(100000)


# Start the continuous broadcast loop if AUTO_GCASTS is True
if AUTO_GCASTS:
    asyncio.create_task(continuous_broadcast())





